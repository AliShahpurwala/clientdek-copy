name: Deploy Main to EC2
on:
  push:
    branches: [ main ]
    paths-ignore:
      - '.github/**'
  workflow_dispatch:
  

env:
  CR_PAT: ${{ secrets.GITHUB_TOKEN }}
  SSH_USER: ${{ secrets.USER_NAME }}
  SSH_KEY: ${{ secrets.AWS_PRIVATE_KEY }}
  SSH_HOST: ${{ secrets.HOSTNAME }}
  DB_PASS:  ${{ secrets.DEV_DB_PASSWORD}}

jobs:
  deploy-backend:
    runs-on: ubuntu-latest
    env: 
      env_file: |
          DEBUG=False
          DB_NAME=production
          DB_USER=postgres
          DB_URL=${{ vars.DB_URL }}
          DB_PASSWORD=${{ secrets.DEV_DB_PASSWORD }}
          DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}
          SENDGRID_API_KEY=${{ secrets.SENDGRID_API_KEY }}
          REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
          AWS_ACCESS_KEY_ID=${{ vars.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
    steps:
      - uses: actions/checkout@v3
      - name: Deploy Backend
        uses: ./.github/actions/main-deployment-steps
        with:
          deployment: backend
          ports: 8080:8080
          ssh_username: $SSH_USER
          ssh_key: $SSH_KEY
          ssh_hostname: $SSH_HOST
          github_token: ${{ secrets.GITHUB_TOKEN }}  
          env_file: $env_file

  deploy-frontend:
    runs-on: ubuntu-latest
    env: 
      env_file: |
        ENVIRONMENT=production
        API_URL=clientdek.com
    steps:
      - uses: actions/checkout@v3
      - name: Deploy Backend
        uses: ./.github/actions/main-deployment-steps
        with:
          deployment: frontend
          ports: 9000:9000
          ssh_username: $SSH_USER
          ssh_key: $SSH_KEY
          ssh_hostname: $SSH_HOST
          github_token: ${{ secrets.GITHUB_TOKEN }}  
          env_file: $env_file
  prune-old:
    runs-on: ubuntu-latest
    needs: [deploy-backend,deploy-frontend]
    steps:
      - name: Configure SSH
        run : |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/staging.key
          chmod 600 ~/.ssh/staging.key
          cat >>~/.ssh/config <<END
          Host staging
            HostName $SSH_HOST
            User $SSH_USER
            IdentityFile ~/.ssh/staging.key
            StrictHostKeyChecking no
          END
        env:
          SSH_USER: ${{ secrets.USER_NAME }}
          SSH_KEY: ${{ secrets.AWS_PRIVATE_KEY }}
          SSH_HOST: ${{ secrets.HOSTNAME }}
      - name: Prune images without containers
        run: ssh staging 'sudo docker image prune -f'
